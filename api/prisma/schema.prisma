// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
 provider = "mysql"
  url      = "mysql://root:root@localhost:3306/commerceDB"
}

enum Role{
  ADMIN
  USER
}
enum OrderEventStatus{
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}
// Define the User table
model User {
  id        Int       @id @default(autoincrement())
  name  String   
  email     String    @unique
  password  String
  role Role @default(USER)
  defaultShippingAddress Int?
   defaultBillingAddress Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  addresses Address[]
  cartItems CartItem[]
  orders Order[]

  @@map("users")
}

model Address{
  id Int @id @default(autoincrement())
  lineOne String
  lineTwo String?
  city String
  country String
  pincode String
  userId Int
  user User @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  @@map("addresses")
}

model Product {
  id Int @id @default(autoincrement())
  name String
  description String
  price Decimal
  tags String
  imageUrl String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
 cartItems CartItem[]
   orders OrderProduct[]

   @@fulltext([name, description, tags])

  @@map("products")
  
}

model CartItem{
 id Int @id @default(autoincrement()) 
 userId Int
  user User @relation(fields: [userId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
 created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("cart_items")
}

model Order {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  netAmount Decimal
  address String
  status OrderEventStatus @default(PENDING)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  products OrderProduct [] 
  events OrderEvent[]

  @@map("orders")
}
model OrderProduct {
  id Int @id @default(autoincrement())
  productId Int
  product Product @relation(fields: [productId], references: [id])
  orderId Int
  order Order @relation(fields: [orderId], references: [id])
  quantity Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("order_products")
}
model OrderEvent {
  id Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields: [orderId], references: [id])
  status OrderEventStatus @default(PENDING)
  quantity Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("order_events")
}

